apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'android-junk-code'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "cn.hx.plugin.junkcode.demo"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        dataBinding = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

android.applicationVariants.all { variant ->
    switch (variant.name) {
        case "release":
            androidJunkCode.configMap.put(variant.name, {
                packageBase = "cn.hx.plugin.ui"
                packageCount = 30
                activityCountPerPackage = 3
                excludeActivityJavaFile = false
                otherCountPerPackage = 50
                methodCountPerClass = 20
                resPrefix = "junk_"
                drawableCount = 300
                stringCount = 300
            })
            break
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}


//
//afterEvaluate {
//    project.tasks.all { task ->
//        task.doLast {
//            task.inputs.files.each { fileTemp ->
//                println 'input file:' + fileTemp.absolutePath
//            }
//
//            println '---------------------------------------------------'
//            task.outputs.files.each { fileTemp ->
//                println 'output file:' + fileTemp.absolutePath
//            }
//        }
//    }
//}
